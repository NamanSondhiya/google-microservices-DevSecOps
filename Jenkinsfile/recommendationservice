library('jenkins-shared') _

def COLOR_MAP = [
    FAILURE: 'danger',
    SUCCESS: 'good',
    UNSTABLE: 'warning'
]

pipeline {
    agent any

    parameters {
        string(name: 'IMAGE_TAG_RECC', defaultValue: '', description: 'Enter the Recommendationservice Docker image tag')
    }

    environment {
        DOCKER_REGISTRY = 'namanss'
        IMAGE_NAME = 'recommendationservice'
        DOCKERFILE_PATH = 'src/recommendationservice'
    }

    tools {
        jdk 'jdk17'
    }

    stages{
        stage('Clean the workspace') {
            steps {
                script {
                    clean_ws()
                }
            }
        }
        stage('Code Clone from Github') {
            steps {
                script {
                    git_clone("https://github.com/NamanSondhiya/google-microservices-DevSecOps.git", "dev")
                }
            }
        }
        stage('SAST Scan') {
            steps {
                dir('src/recommendationservice') {
                    script {
                        sh 'bandit -r . -f json -o bandit-report.json || true'
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'src/recommendationservice/bandit-report.json', allowEmptyArchive: true
                }
            }
        }
        stage('Trivy Fs Scan') {
            steps {
                dir('src/recommendationservice') {
                    script {
                        trivy_fs_scan()
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'src/recommendationservice/trivy-fs-report.txt', allowEmptyArchive: true
                }
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    docker_build(env.IMAGE_NAME, "${params.IMAGE_TAG_RECC}", env.DOCKER_REGISTRY, env.DOCKERFILE_PATH)
                }
            }
        }
        stage('Trivy Image Scan') {
            steps {
                script {
                    trivy_image_scan(env.IMAGE_NAME, "${params.IMAGE_TAG_RECC}", env.DOCKER_REGISTRY)
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'recommendationservice-trivy-image-report.txt', allowEmptyArchive: true
                }
            }
        }
        stage('Docker Push') {
            steps {
                script {
                    docker_push(env.IMAGE_NAME, "${params.IMAGE_TAG_RECC}", env.DOCKER_REGISTRY)
                }
            }
        }
    }
    post {
        always {
            echo 'Slack Notification'
            script {
                def buildStatus = currentBuild.currentResult
                def colorCode = buildStatus == 'SUCCESS' ? '#00FF00' : '#FF0000'
                slackSend(
                    channel: '#jenkins-ci',
                    color: colorCode,
                    message: "Build *${env.JOB_NAME}* #${env.BUILD_NUMBER} finished with status: *${buildStatus}*\n${env.BUILD_URL}"
                )
            }
        }
    }
}