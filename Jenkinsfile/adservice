library('jenkins-shared') _

def COLOR_MAP = [
    'FAILURE' : 'Danger',
    'SUCCESS' : 'Good',
]

pipeline {
    agent any

     parameters {
        string(name: 'IMAGE_TAG_AD', defaultValue: '', description: 'Enter the Adservice Docker image tag')
    }
   
    tools {
        jdk 'jdk21'
        gradle 'gradle8'
    }
    
    environment {
        SONAR_EV= tool 'Sonar'
        GOOGLE_APPLICATION_CREDENTIALS = ''
        GCP_PROJECT_ID = ''
        ENABLE_GCP = 'false'
    }

    stages{
        stage('Validate the Parameters') {
            steps {
                script {              
                    if (params.IMAGE_TAG_AD == '' ) {
                        error("IMAGE_TAG_AD' must be provided and can't be empty.")
                    }
                    echo "--||-----Using tag ${params.IMAGE_TAG_AD} -----||--"
                }
            }
        }
        stage('Clean the workspace') {
            steps {
                script {
                    clean_ws()
                }
            }
        }
        stage('Code Clone from Github') {
            steps {
                script {
                    git_clone("https://github.com/NamanSondhiya/google-microservices-DevSecOps.git", "dev")
                }
            }
        }
        stage('Build and Unit Test') {
            steps {
                dir('src/adservice') {
                    script {
                        sh 'chmod +x gradlew'
                        sh './gradlew clean build -x test -x verifyGoogleJavaFormat'
                    }
                }
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                dir('src/adservice') {
                    withSonarQubeEnv('Sonar') {
                        sh ''' $SONAR_EV/bin/sonar-scanner -Dsonar.projectName=adservice -Dsonar.projectKey=adservice -Dsonar.sources=. -Dsonar.java.binaries=build/classes/java/main '''
                    }
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script  {
                    sonarqube_QualityGate(3, true)
                }
            }
        }
        stage('Trivy Fs Scan') {
            steps {
                dir('src/adservice') {
                    script {
                        trivy_fs_scan()
                    }
                }
            }
            post {
                always {
                    archiveArtifacts 'src/adservice/trivy-fs-report.txt'
                }
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    docker_build("adservice", "${params.IMAGE_TAG_AD}", "namanss", "src/adservice")
                }
            }
        }
        stage('Trivy Image Scan') {
            steps {
                script {
                    trivy_image_scan("adservice","${params.IMAGE_TAG_AD}","namanss")
                }
            }
            post {
                always {
                    archiveArtifacts 'adservice-trivy-image-report.txt'
                }
            }
        }
        stage('Docker Push') {
            steps {
                script {
                    docker_push("adservice", "${params.IMAGE_TAG_AD}", "namanss")
                }
            }
        }
    }
    post {
        always {
            echo 'Slack Notification'
            slackSend (
                channel: '#jenkins-ci',
                color: COLOUR_MAP(currentBuild.currentResult),
                message: "${currentBuild.currentResult}:" Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}
            )
        }
    }
}