library('jenkins-shared') _

def COLOR_MAP = [
    FAILURE: 'danger',
    SUCCESS: 'good',
    UNSTABLE: 'warning'
]

pipeline {
    agent any

    parameters {
        string(name: 'IMAGE_TAG_PAY', defaultValue: '', description: 'Enter the Paymentservice Docker image tag')
    }

    tools {
        jdk 'jdk17'
        nodejs 'nodejs20'
    }

    environment {
        SONAR_EV = tool 'Sonar'
    }

    stages{
        stage('Clean the workspace') {
            steps {
                script {
                    clean_ws()
                }
            }
        }
        stage('Code Clone from Github') {
            steps {
                script {
                    git_clone("https://github.com/NamanSondhiya/google-microservices-DevSecOps.git", "dev")
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                dir('src/paymentservice') {
                    script {
                        sonarqube_analysis("${SONAR_EV}", "paymentservice", "paymentservice", "js")
                    }
                }
            }
        }
        stage('Quality Gates') {
            steps {
                script {
                    sonarqube_QualityGate(5, false)
                }
            }
        }
        stage('Dependencies Install') {
            steps {
                dir('src/paymentservice') {
                    sh 'npm install'
                }
            }
        }
        stage('Trivy Fs Scan') {
            steps {
                dir('src/paymentservice') {
                    script {
                        trivy_fs_scan()
                    }
                }
            }
            post {
                always {
                    archiveArtifacts 'src/paymentservice/trivy-fs-report.txt'
                }
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    docker_build("paymentservice", "${BUILD_NUMBER}", "namanss", "src/paymentservice")
                }
            }
        }
        stage('Trivy Image Scan') {
            steps {
                script {
                    trivy_image_scan("paymentservice","${BUILD_NUMBER}","namanss")
                }
            }
            post {
                always {
                    archiveArtifacts 'paymentservice-trivy-image-report.txt'
                }
            }
        }
        stage('Docker Push') {
            steps {
                script {
                    docker_push("paymentservice", "${BUILD_NUMBER}", "namanss")
                }
            }
        }
    }
    post {
        always {
            echo 'Slack Notification'
            script {
                def buildStatus = currentBuild.currentResult
                def colorCode = buildStatus == 'SUCCESS' ? '#00FF00' : '#FF0000'
                slackSend(
                    channel: '#jenkins-ci',
                    color: colorCode,
                    message: "Build *${env.JOB_NAME}* #${env.BUILD_NUMBER} finished with status: *${buildStatus}*\n${env.BUILD_URL}"
                )
            }
        }
    }
}