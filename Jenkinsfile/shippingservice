library('jenkins-shared') _

def COLOR_MAP = [
    FAILURE: 'danger',
    SUCCESS: 'good',
    UNSTABLE: 'warning'
]

pipeline {
    agent any

    parameters {
        string(name: 'IMAGE_TAG_SHIP', defaultValue: '', description: 'Enter the Shippingservice Docker image tag')
    }

    tools {
        go 'go1.25'
    }
    
    environment {
        GOPATH = "${HOME}/go"
        PATH = "${GOPATH}/bin:${PATH}"
        SONAR_EV= tool 'Sonar'    
    }

    stages{
        stage('Clean the workspace') {
            steps {
                script {
                    clean_ws()
                }
            }
        }
        stage('Code Clone from Github') {
            steps {
                script {
                    git_clone("https://github.com/NamanSondhiya/google-microservices-DevSecOps.git", "dev")
                }
            }
        }
        stage('Go Security Scan (gosec)') {
            steps {
                dir('src/shippingservice') {
                    script {
                        sh '''
                        export PATH=$GOPATH/bin:$PATH
                        go install github.com/securego/gosec/v2/cmd/gosec@latest
                        gosec ./... | tee gosec-report.txt
                        '''                    
                    }
                }
            }
            post {
                always {
                    archiveArtifacts 'src/shippingservice/gosec-report.txt'
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                dir('src/shippingservice') {
                    script {
                        sonarqube_analysis("${SONAR_EV}", "shippingservice", "shippingservice", "go")
                    }
                }
            }
        }
        stage('Quality Gates') {
            steps {
                script {
                    sonarqube_QualityGate(5,true)
                }
            }
        }
        stage('Go Build') {
            steps {
                dir('src/shippingservice') {
                    sh '''
                    export PATH=$GOPATH/bin:$PATH
                    go mod tidy
                    go build -o shippingservice
                    '''
                }
            }
        }
        stage('Go Test') {
            steps {
                dir('src/shippingservice') {
                    sh '''
                    export PATH=$GOPATH/bin:$PATH
                    go test -v ./... | tee go-test-report.txt
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts 'src/shippingservice/go-test-report.txt'
                }
            }
        }
        stage('Owasp Scan') {
            steps {
                dir('src/shippingservice') {
                    script {
                        owasp_scan()
                    }
                }
            }
        }
        stage('Go Vulnerability Check') {
            steps {
                dir('src/shippingservice') {
                    sh '''
                    export PATH=$GOPATH/bin:$PATH
                    go install golang.org/x/vuln/cmd/govulncheck@latest
                    govulncheck ./... | tee govulncheck-report.txt
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts 'src/shippingservice/govulncheck-report.txt'
                }
            }
        }
        stage('Trivy Fs Scan') {
            steps {
                dir('src/shippingservice') {
                    script {
                        trivy_fs_scan()
                    }
                }
            }
            post {
                always {
                    archiveArtifacts 'src/shippingservice/trivy-fs-report.txt'
                }
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    docker_build("shippingservice", "${params.IMAGE_TAG_SHIP}", "namanss", "src/shippingservice")
                }
            }
        }
        stage('Trivy Image Scan') {
            steps {
                script {
                    trivy_image_scan("shippingservice","${params.IMAGE_TAG_SHIP}","namanss")
                }
            }
            post {
                always {
                    archiveArtifacts 'shippingservice-trivy-image-report.txt'
                }
            }
        }
        stage('Docker Push') {
            steps {
                script {
                    docker_push("shippingservice", "${params.IMAGE_TAG_SHIP}", "namanss")
                }
            }
        }
    }
    post {
        always {
            echo 'Slack Notification'
            script {
                def buildStatus = currentBuild.currentResult
                def colorCode = buildStatus == 'SUCCESS' ? '#00FF00' : '#FF0000'
                slackSend(
                    channel: '#jenkins-ci',
                    color: colorCode,
                    message: "Build *${env.JOB_NAME}* #${env.BUILD_NUMBER} finished with status: *${buildStatus}*\n${env.BUILD_URL}"
                )
            }
        }
        success {
            buid job: "google-microservice-CD", parameters: [
                string(name: "IMAGE_TAG_SHIP", value: "${params.IMAGE_TAG_SHIP}")
            ]
        }
    }
}