library('jenkins-shared') _

def COLOR_MAP = [
    'FAILURE' : 'Danger',
    'SUCCESS' : 'Good',
]

pipeline {
    agent any

    parameters {
        string(name: 'IMAGE_TAG_CART', defaultValue: '', description: 'Enter the Cartservice Docker image tag')
    }

    tools {
        dotnetsdk 'dotnet9'
        dotnetsdk 'dotnet7'
    }

    environment {
        SONAR_EV = tool 'Sonar'
    }

    stages{
        stage('Clean the workspace') {
            steps {
                script {
                    clean_ws()
                }
            }
        }
        stage('Code Clone from Github') {
            steps {
                script {
                    git_clone("https://github.com/NamanSondhiya/google-microservices-DevSecOps.git", "dev")
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                dir('src/cartservice') {
                    script {
                        sonarqube_analysis("${SONAR_EV}", "cartservice", "cartservice")
                    }
                }
            }
        }
        stage('Quality Gates') {
            steps {
                script {
                    sonarqube_QualityGate(5, true)
                }
            }
        }
        stage('Dotnet Tests') {
            steps {
                dir('src/cartservice/src') {
                    sh '''
                    dotnet restore
                    dotnet build --no-incremental
                    dotnet test --logger:trx
                    '''
                }
            }
        }
        stage('Owasp Dependency Check') {
            steps {
                dir('src/cartservice') {
                    script {
                        owasp_scan()
                    }
                }
            }
            post {
                always {
                    archiveArtifacts 'src/cartservice/dependency-check-report.xml'
                }
            }
        }
        stage('Trivy Fs Scan') {
            steps {
                dir('src/cartservice') {
                    script {
                        trivy_fs_scan()
                    }
                }
            }
            post {
                always {
                    archiveArtifacts 'src/cartservice/trivy-fs-report.txt'
                }
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    docker_build("cartservice", "${params.IMAGE_TAG_CART}", "namanss", "src/cartservice/src")
                }
            }
        }
        stage('Trivy Image Scan') {
            steps {
                script {
                    trivy_image_scan("cartservice","${params.IMAGE_TAG_CART}","namanss")
                }
            }
            post {
                always {
                    archiveArtifacts 'cartservice-trivy-image-report.txt'
                }
            }
        }
        stage('Docker Push') {
            steps {
                script {
                    docker_push("cartservice", "${params.IMAGE_TAG_CART}", "namanss")
                }
            }
        }
    }
    post {
        always {
            echo 'Slack Notification'
            slackSend (
                channel: '#jenkins-ci',
                color: COLOR_MAP(currentBuild.currentResult),
                message: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build: ${env.BUILD_NUMBER}"
            )
        }
    }
}